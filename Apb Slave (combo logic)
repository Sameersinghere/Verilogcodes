module apb_combo (pclk,prst,paddr,pwdata,prdata,pwrite,psel,penable,pready, tx_ref, tx_vld,rd_data, rd_datavld, addr_in, data_in);
parameter S_IDLE = 3'b000;
parameter S_SETUP = 3'b001;
parameter S_ACCESS = 3'b010;
input pclk;
input prst;
output reg [31:0] paddr;
output reg [31:0] pwdata;
input [31:0] prdata;
output reg pwrite;
output reg psel;
output reg penable;
input pready;
input [1:0] tx_ref;
input tx_vld;
output reg [31:0] rd_data;
output reg rd_datavld;
input [31:0] addr_in;
input [31:0] data_in;
reg [2:0] cs, ns;
reg [1:0] store_ref;
reg [31:0] store_addr;
reg [7:0] store_data;

// transfer vld_txfer =
assign vld_txfer = (tx_vld && (tx_ref == 2'b00 || tx_ref == 2'b01));
 
always @(*)
	case(cs)
	S_IDLE:
	begin
		if (vld_txfer )
			 ns = S_SETUP;
	        else 
			 ns = S_IDLE;
	end
	S_SETUP:
	begin
		ns = S_ACCESS;
	end
	

        S_ACCESS:
        begin
        if (vld_txfer && pready) begin
          ns = S_SETUP;
        end else if (!vld_txfer && pready) begin
          ns = S_IDLE;
        end 
        else begin
          ns = S_ACCESS;
        end
        end
        endcase
/*always @(*)
	case(cs)
	S_IDLE:
	begin
		if (tx_vld && (tx_ref == 2'b00))
			 ns = S_SETUP;
		else if (tx_vld && (tx_ref == 2'b01))
			 ns = S_SETUP;
		 else 
			 ns = S_IDLE;
	end
	S_SETUP:
	begin
		ns = S_ACCESS;
	end
	S_ACCESS: // pready ? vld_xfer -- SETUP : IDLE  -- ACCESS
	begin
		if (tx_vld && (tx_ref == 2'b00) && (pready == 1'b1))
			ns = S_SETUP;
		else if (tx_vld && (tx_ref == 2'b01) && (pready == 1'b1))
			ns = S_SETUP;
		else if (tx_vld && (tx_ref == 2'b10) && (pready == 1'b1))
			ns = S_IDLE;
		else if (tx_vld && (tx_ref == 2'b11) && (pready == 1'b1))
			ns = S_IDLE;
		else if (!tx_vld && pready)

                         ns = S_IDLE;
                else if (pready == 1'b0)

                        ns = S_ACCESS;

	end
	default:
		ns = S_IDLE;

endcase*/
always @(posedge pclk)
begin
	if (prst)
	begin
		
	        store_addr <= 32'b0;
		store_ref <= 2'b00;
		store_data <= 32'b0;
	end
       else  if (((cs == S_ACCESS) && pready) || ((cs == S_IDLE) && (tx_vld && (tx_ref == 2'b00 || 2'b01))))
       begin
	       
	       	       // if ( at those sampling points)
	// cs <= ns;
       store_ref <= tx_ref;
       store_addr <= addr_in;
       store_data <= data_in;

       end
       
end
always @(posedge pclk)
begin
	if (prst)
		cs <= S_IDLE;
	else
		cs <= ns;
end

// make seq
always @(*)
begin
	    rd_data = 32'b0;
	    rd_datavld = 1'b0;
    case(cs)
        S_IDLE:
        begin
            psel = 1'b0;
            penable = 1'b0;
            paddr = store_addr ; // ??
            pwrite = 1'b0;
	    pwdata = 32'b0 ;  // ?? 
                
                

		    
        end
        
        S_SETUP:
        begin
		
            psel = 1'b1;
            penable = 1'b0;
            paddr = store_addr;
            pwrite = (store_ref == 2'b01 ? 1'b1 : 1'b0);  
	    pwdata = store_data;  // check for write condition
    end  
      
        S_ACCESS:
        begin
          psel = 1'b1;
	  penable = 1'b1;
	  paddr = store_addr;
	  pwrite = (store_ref == 2'b01 ? 1'b1 : 1'b0);
	  pwdata = store_data ; 
	  rd_data = (prdata ? pready : 1'b0) ; //check for pready , else 0s
	  rd_datavld = pready;
   end      default:
	begin

            psel = 1'b0;
            penable = 1'b0;
            paddr = 32'b0;
            pwrite = 1'b0;
            pwdata = 32'b0;
            rd_datavld = 1'b0;
	   rd_data = 32'b0; 
    end
    endcase
end
endmodule
